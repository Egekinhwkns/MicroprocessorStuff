;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Pzt Eki 7 2019
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

CODE    SEGMENT PARA 'CODE'
        ASSUME CS:CODE, DS:DATA, SS:STAK
    
STAK    SEGMENT PARA STACK 'STACK'
        DW 20 DUP(?)
STAK    ENDS

DATA    SEGMENT PARA 'DATA'
;DIGITS  DB 0F9H, 0A4H, 0B0H, 99H, 92H, 82H, 0F8H, 80H, 98H, 0C0H  ;array definition
DIGITS DB 0B0H , 82H, 98H  ,0BFH ,0A4H ,92H ,80H , 0C0H, 0F9H,99H , 0F8H,0B6H
DEGERLER DB 4 DUP(?)
DATA    ENDS


START     PROC FAR                                ; ana yordam
        ;------------------------------------------------------------------------
        ; Dönüþ için gerekli olan deðerler yýðýnda saklanýyor
        ;------------------------------------------------------------------------
    PUSH DS
    XOR AX, AX
    PUSH AX
        ;------------------------------------------------------------------------
        ; DATA ismiyle tanýmlý kesim alanýna eriþebilmek için gerekli tanýmlar
        ;------------------------------------------------------------------------
    MOV AX, DATA
    MOV DS, AX
    MOV AL, 81H                            ; PortA, PortB, PortCH output
    OUT 0AFH, AL                            ; PortCL input yönlü
    MOV AL, 0FFH
    OUT 0ABH, AL                            ; tuþ tarama takýmýnda sutunlarý inaktif yapma
    OUT 0A9H, AL                            ; 7 parçalý göstergede tüm parçalar sönük
    OUT 0ADH,AL
        
ENDLESS:  
  
    MOV DX,00H
    MOV CL, 3                            ; tuþ tarama takýmýnda üç sütun için tekrarla
    MOV BL, 08H                            ; BL’nin 3. Bit’i 1, diðer bit’leri 0
SUTUN:    
    SHR BL, 1                            ; ilk geçiþte BL’nin 2. Bit’i, ikinci geçiþte 
                                                ; 1. bit’i, üçüncü geçiþte 0. Bit’i 1, 
                                                ; diðer bit’leri 0
    MOV AL, BL
    OUT 0ABH, AL                            ; ilk geçiþte 1 no’lu sütun, ikinci geçiþte 
                                                ; 2 no’lu sütun, üçüncü geçiþte 3 no’lu sütun 
                                                ; aktif edilir
    IN AL, 0ADH                            ; satýrlarý oku
    AND AL, 0FH                            ; PortCL bit’lerini koru, 
                                                ; PortCH bit’lerini maske ile 0’la
    CMP AL, 00H                            ; aktif sütundan herhangi bir tuþa 
    JE DEVAM1                            ; basýlmamýþsa sonuç 0, bir sonraki sütuna geç
    PUSH AX                                ; basýlmýþsa satýr deðerlerini yýðýna sakla
        
TUSBASILI:    
    IN AL, 0ADH
    AND AL, 0FH
    CMP AL, 00H
    JNE TUSBASILI                            ; basýlý tuþ býrakýlana kadar bekle
    POP AX
    MOV DH, AL                            ; okunan satýr deðeri DH’ta
    MOV CH, CL
    DEC CH
    MOV AL, 4
    MUL CH                                ; AX<-aktif olan sütunun ilk tuþu baþtan 
                                ; kaçýncý sýrada
    MOV DL, 0
DEVAM3:    
    SHR DH,1                        ; DH’taki 1 deðeri kaçýncý bitte
    CMP DH, 00H
    JE DEVAM2                            ; DH<-0, DL<-basýlý tuþun satýr numarasý
    INC DL
    JMP DEVAM3
DEVAM2:    
    ADD AX, DX                            ; AX <- basýlan tuþ indisi 
    MOV SI, AX
    MOV AL, DIGITS[SI]
    MOV DEGERLER[DI],AL                                            ; AL<-basýlan tuþa karþýlýk 7 parçalý gösterge verisi
    INC DI
    CMP DI,4
    JNE  DEVAM1
    CALL YAZDIR                            ; tuþ deðeri 7 parçalý göstergede yakýlýr
DEVAM1:    
    LOOP SUTUN                            ; bir sonraki sütun
    JMP ENDLESS                            ; sonsuz döngüde tekrarla
    RETF
    
START     ENDP

YAZDIR PROC NEAR

 DON: 
    CALL WAIT_A_LITTLE
    MOV AL, 08FH
    OUT 0ADH,AL
    MOV AL,DEGERLER[0]
    OUT 0A9H, AL
    CALL WAIT_A_LITTLE
    MOV AL, 04FH
    OUT 0ADH,AL
    MOV AL,DEGERLER[1]
    OUT 0A9H, AL
    CALL WAIT_A_LITTLE
    MOV AL, 02FH
    OUT 0ADH,AL
    MOV AL,DEGERLER[2]
    OUT 0A9H, AL
    CALL WAIT_A_LITTLE
    MOV AL, 01FH
    OUT 0ADH,AL
    MOV AL,DEGERLER[3]
    OUT 0A9H, AL
    CALL WAIT_A_LITTLE
    
    LOOP DON
    
    RET
YAZDIR ENDP
WAIT_A_LITTLE PROC NEAR

;Remember to save previous values
;Looping to spend sometime

MOV CL, 0FFH
LOOP1: LOOP LOOP1

RET
WAIT_A_LITTLE ENDP
CODE    ENDS

        END START